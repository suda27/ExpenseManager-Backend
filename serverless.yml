service: em-ts-backend

frameworkVersion: "2"
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-scheduler
package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    httpPort: 4000
  projectname: em
  usertable: ${self:custom.projectname}-${sls:stage}-user
  userAccountTable: ${self:custom.projectname}-${sls:stage}-user-account
  userTransactionTable: ${self:custom.projectname}-${sls:stage}-user-transaction
  
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'offline'}
  region: ${opt:region, 'us-east-1'}
  lambdaHashingVersion: 20201221
  memorySize: 128
  timeout: 30
  endpointType: regional
  logs:
    restApi:
      executionLogging: false
  environment:
    USER_TABLE: ${self:custom.usertable}
    USER_ACCOUNT_TABLE: ${self:custom.userAccountTable}
    USER_TRANSACTION_TABLE: ${self:custom.userTransactionTable}
  iam:
    role:
      name: tsbe-lambda-execution-role-${sls:stage}
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - lambda:*
            - cloudformation:*
          Resource: "*"

functions:
  loginUserApi:
    handler: src/api/user/loginUserApi.handler
    name: ${self:custom.projectname}-${sls:stage}-login-user
    events:
      - http:
          path: /api/em-login-user
          method: POST
          cors: true
  createUserApi:
    handler: src/api/user/createUserApi.handler
    name: ${self:custom.projectname}-${sls:stage}-create-user
    events:
      - http:
          path: /api/em-create-user
          method: POST
          cors: true
  getUserApi:
    handler: src/api/user/getUserApi.handler
    name: ${self:custom.projectname}-${sls:stage}-get-user
    events:
      - http:
          path: /api/em-get-user
          method: POST
          cors: true
  updateUserApi:
    handler: src/api/user/updateUserApi.handler
    name: ${self:custom.projectname}-${sls:stage}-update-user
    events:
      - http:
          path: /api/em-update-user
          method: PUT
          cors: true
  deleteUserApi:
    handler: src/api/user/deleteUserApi.handler
    name: ${self:custom.projectname}-${sls:stage}-delete-user
    events:
      - http:
          path: /api/em-delete-user
          method: DELETE
          cors: true
  createUserAccountApi:
    handler: src/api/useraccount/createUserAccountApi.handler
    name: ${self:custom.projectname}-${sls:stage}-create-userAccount
    events:
      - http:
          path: /api/em-create-userAccount
          method: POST
          cors: true
  fetchUserAccountsApi:
    handler: src/api/useraccount/fetchUserAccountsApi.handler
    name: ${self:custom.projectname}-${sls:stage}-fetch-userAccounts
    events:
      - http:
          path: /api/em-fetch-userAccounts
          method: POST
          cors: true
  fetchSingleUserAccountsApi:
    handler: src/api/useraccount/fetchSingleUserAccountApi.handler
    name: ${self:custom.projectname}-${sls:stage}-fetch-singleUserAccounts
    events:
      - http:
          path: /api/em-fetch-singleUserAccounts
          method: POST
          cors: true
  updateSingleUserAccountApi:
    handler: src/api/useraccount/updateSingleUserAccountApi.handler
    name: ${self:custom.projectname}-${sls:stage}-update-singleUserAccounts
    events:
      - http:
          path: /api/em-update-singleUserAccounts
          method: PUT
          cors: true
  addTransactionApi:
    handler: src/api/transaction/addTransactionApi.handler
    name: ${self:custom.projectname}-${sls:stage}-add-transaction
    events:
      - http:
          path: /api/em-transaction
          method: POST
          cors: true
  fetchAllUserTransactionApi:
    handler: src/api/transaction/fetchAllUserTransactionApi.handler
    name: ${self:custom.projectname}-${sls:stage}-fetch-user-transactions
    events:
      - http:
          path: /api/em-fetch-user-transactions
          method: POST
          cors: true
  fetchAllAccountTransactionApi:
    handler: src/api/transaction/fetchAllAccountTransactionApi.handler
    name: ${self:custom.projectname}-${sls:stage}-fetch-account-transactions
    events:
      - http:
          path: /api/em-fetch-account-transactions
          method: POST
          cors: true
  fetchSingleTransactionApi:
    handler: src/api/transaction/fetchSingleTransactionApi.handler
    name: ${self:custom.projectname}-${sls:stage}-fetch-single-transactions
    events:
      - http:
          path: /api/em-fetch-single-transactions
          method: POST
          cors: true
  updateTransactionApi:
    handler: src/api/transaction/updateTransactionApi.handler
    name: ${self:custom.projectname}-${sls:stage}-update-single-transaction
    events:
      - http:
          path: /api/em-update-single-transaction
          method: PUT
          cors: true

resources:
  Resources:
    EMUSERTABLE:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usertable}
        AttributeDefinitions:
          - AttributeName: "userId"
            AttributeType: "S"
          - AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "userId"
            KeyType: "HASH"
          - AttributeName: "email"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST

    EMUSERACCOUNTTABLE:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userAccountTable}
        AttributeDefinitions:
          - AttributeName: "userID"
            AttributeType: "S"
          - AttributeName: "accountID"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "userID"
            KeyType: "HASH"
          - AttributeName: "accountID"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST

    EMUSERTRANSACTIONTABLE:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTransactionTable}
        AttributeDefinitions:
          - AttributeName: "transactionID"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "transactionID"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
